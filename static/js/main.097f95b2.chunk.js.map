{"version":3,"sources":["logo.svg","Map.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","map","marker","answers","Map","props","mySubmitHandler","event","console","log","state","cur_q","preventDefault","push","cur_selected","current","setState","setLatLng","questions","coords","onValueChange","target","value","update","e","distance","getDistance","latitude","_latlng","lat","longitude","lng","latlng","document","getElementById","innerHTML","close","question","alternatives","L","center","zoom","layers","tileLayer","attribution","this","addTo","gps","Control","Gps","autoActive","autoCenter","on","getCenter","closePopup","activate","Col","Row","id","style","width","height","className","sm","Form","onSubmit","Group","as","Check","type","label","name","onChange","span","offset","Button","React","Component","App","Container","fluid","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"mJAAAA,EAAOC,QAAU,IAA0B,kC,gECMvCC,EACAC,E,sKACAC,EAAU,GA2JCC,E,kDAzJb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IA2HRC,gBAAkB,SAACC,GACjBC,QAAQC,IAAI,EAAKC,MAAMC,OACvBJ,EAAMK,iBACNT,EAAQU,KAAK,EAAKH,MAAMI,cACxB,IAAIC,EAAU,EAAKL,MAAMC,MACzB,EAAKK,SAAS,CAAEL,MAAOI,EAAU,IACjCb,EAAOe,UAAU,EAAKP,MAAMQ,UAAUH,EAAU,GAAGI,OAAO,EAAKT,MAAMI,eACrE,EAAKE,SAAS,CACZF,aAAc,QApIC,EAwInBM,cAAgB,SAACb,GACf,EAAKS,SAAS,CACZF,aAAcP,EAAMc,OAAOC,SA1IZ,EA8InBC,OAAS,SAACC,GACR,IAAIC,EAAWC,sBACb,CAAEC,SAAUzB,EAAO0B,QAAQC,IAAKC,UAAW5B,EAAO0B,QAAQG,KAC1D,CAAEJ,SAAUH,EAAEQ,OAAOH,IAAKC,UAAWN,EAAEQ,OAAOD,MAEhDE,SAASC,eAAe,UAAUC,UAAYV,EAE9C,EAAKT,SAAS,CAAEoB,MAAOX,EAAW,OAnJlC,EAAKf,MAAQ,CACXR,OAAQ,CAAC,UAAW,WACpBgB,UAAW,CACT,CACEmB,SAAU,wDACVC,aAAc,CAAC,SAAU,QAAS,UAClCnB,OAAQ,CAAC,CAAC,UAAW,aAEvB,CACEkB,SAAU,mCACVC,aAAc,CAAC,aAAc,YAAa,YAC1CnB,OAAQ,CACN,CAAC,UAAW,SACZ,CAAC,UAAW,SACZ,CAAC,UAAW,cAIlBR,MAAO,EACPyB,OAAO,EACPtB,aAAc,MAtBC,E,gEAyBE,IAAD,OAClBb,EAAMsC,IAAEtC,IAAI,MAAO,CACjBuC,OAAQ,CAAC,UAAW,WACpBC,KAAM,GACNC,OAAQ,CACNH,IAAEI,UACA,qFACA,CACEC,YAAa,eAKrB1C,EAASqC,IAAErC,OAAO2C,KAAKnC,MAAMQ,UAAU2B,KAAKnC,MAAMC,OAAOQ,OAAO,IAAI2B,MAAM7C,GAE1E,IAAI8C,EAAM,IAAIR,IAAES,QAAQC,IAAI,CAC1BC,YAAY,EACZC,YAAY,IAGdJ,EACGK,GAAG,eAAe,SAAC5B,GAElBhB,QAAQC,IAAIe,EAAEQ,OAAQ/B,EAAIoD,aAE1B,EAAK9B,OAAOC,MAEb4B,GAAG,gBAAgB,SAAC5B,GACnBA,EAAEtB,OAAOoD,gBAGbP,EAAID,MAAM7C,GACV8C,EAAIQ,a,+BAIJ,OACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,yBAAKC,GAAG,MAAMC,MAAO,CAAEC,MAAO,QAASC,OAAQ,YAEjD,kBAACJ,EAAA,EAAD,CAAKK,UAAU,OACb,kBAACN,EAAA,EAAD,CAAKO,GAAI,IACP,wBAAIL,GAAG,aAEPb,KAAKnC,MAAM0B,OAAS,4DACrBS,KAAKnC,MAAM0B,OACV,kBAACoB,EAAA,EAAD,KACE,4BAAKX,KAAKnC,MAAMQ,UAAU2B,KAAKnC,MAAMC,OAAO0B,UAE5C,4BACE,kBAAC2B,EAAA,EAAD,CAAMC,SAAUpB,KAAKvC,iBACnB,kCACE,kBAAC0D,EAAA,EAAKE,MAAN,CAAYC,GAAIV,KACd,kBAACD,EAAA,EAAD,CAAKO,GAAI,IACP,kBAACC,EAAA,EAAKI,MAAN,CACEC,KAAK,QACLC,MAAOzB,KAAKnC,MAAMQ,UAAU2B,KAAKnC,MAAMC,OAAO2B,aAAa,GAC3DiC,KAAK,SACLb,GAAG,UACHpC,MAAO,EACPkD,SAAU3B,KAAKzB,gBAEjB,kBAAC4C,EAAA,EAAKI,MAAN,CACEC,KAAK,QACLC,MAAOzB,KAAKnC,MAAMQ,UAAU2B,KAAKnC,MAAMC,OAAO2B,aAAa,GAC3DiC,KAAK,SACLb,GAAG,UACHpC,MAAO,EACPkD,SAAU3B,KAAKzB,gBAEjB,kBAAC4C,EAAA,EAAKI,MAAN,CACEC,KAAK,QACLC,MAAOzB,KAAKnC,MAAMQ,UAAU2B,KAAKnC,MAAMC,OAAO2B,aAAa,GAC3DiC,KAAK,SACLb,GAAG,UACHpC,MAAO,EACPkD,SAAU3B,KAAKzB,mBAMtByB,KAAKnC,MAAMI,cACV,kBAACkD,EAAA,EAAKE,MAAN,CAAYC,GAAIV,KACd,kBAACD,EAAA,EAAD,CAAKO,GAAI,CAAEU,KAAM,GAAIC,OAAQ,IAC3B,kBAACC,EAAA,EAAD,CAAQN,KAAK,UAAb,uB,GAhHNO,IAAMC,WCOTC,MARf,WACE,OACE,kBAACC,EAAA,EAAD,CAAWC,OAAO,EAAMlB,UAAU,WAChC,kBAAC,EAAD,QCCcmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFvD,SAASC,eAAe,SDyHpB,kBAAmBuD,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxF,QAAQwF,MAAMA,EAAMC,c","file":"static/js/main.097f95b2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\r\nimport L from \"leaflet\";\r\nimport Gps from \"leaflet-gps\";\r\nimport { getDistance } from \"geolib\";\r\nimport { Row, Col, Form, Button } from \"react-bootstrap\";\r\n\r\nlet map;\r\nlet marker;\r\nlet answers = [];\r\nclass Map extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      marker: [58.592003, 16.188313],\r\n      questions: [\r\n        {\r\n          question: \"Fråga 1: hur många kvitton har ni lämnat in?\",\r\n          alternatives: [\"1:  20\", \"X: 30\", \"2: 40 \"],\r\n          coords: [[58.589957, 16.193378]],\r\n        },\r\n        {\r\n          question: \"Fråga 2: Är Anna snäll?\",\r\n          alternatives: [\"1:  Alltid\", \"X: Ibland\", \"2: Nope \"],\r\n          coords: [\r\n            [58.590729, 16.1925],\r\n            [58.590729, 16.1925],\r\n            [58.589852, 16.191838],\r\n          ],\r\n        },\r\n      ],\r\n      cur_q: 0,\r\n      close: true,\r\n      cur_selected: null,\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    map = L.map(\"map\", {\r\n      center: [58.592003, 16.188313],\r\n      zoom: 14,\r\n      layers: [\r\n        L.tileLayer(\r\n          \"https://{s}.basemaps.cartocdn.com/rastertiles/voyager_labels_under/{z}/{x}/{y}.png\",\r\n          {\r\n            attribution: \"Antique\",\r\n          }\r\n        ),\r\n      ],\r\n    });\r\n    marker = L.marker(this.state.questions[this.state.cur_q].coords[0]).addTo(map);\r\n\r\n    var gps = new L.Control.Gps({\r\n      autoActive: true,\r\n      autoCenter: false,\r\n    }); //inizialize control\r\n\r\n    gps\r\n      .on(\"gps:located\", (e) => {\r\n        //\te.marker.bindPopup(e.latlng.toString()).openPopup()\r\n        console.log(e.latlng, map.getCenter());\r\n\r\n        this.update(e);\r\n      })\r\n      .on(\"gps:disabled\", (e) => {\r\n        e.marker.closePopup();\r\n      });\r\n\r\n    gps.addTo(map);\r\n    gps.activate();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Col>\r\n        <Row>\r\n          <div id=\"map\" style={{ width: \"100vw\", height: \"100vw\" }}></div>\r\n        </Row>\r\n        <Row className=\"p-2\">\r\n          <Col sm={12}>\r\n            <h2 id=\"coords\"></h2>\r\n          </Col>\r\n          {!this.state.close && <h1>Gå till nästa fråga</h1>}\r\n          {this.state.close && (\r\n            <Col>\r\n              <h1>{this.state.questions[this.state.cur_q].question}</h1>\r\n\r\n              <h4>\r\n                <Form onSubmit={this.mySubmitHandler}>\r\n                  <fieldset>\r\n                    <Form.Group as={Row}>\r\n                      <Col sm={10}>\r\n                        <Form.Check\r\n                          type=\"radio\"\r\n                          label={this.state.questions[this.state.cur_q].alternatives[0]}\r\n                          name=\"Radios\"\r\n                          id=\"Radios1\"\r\n                          value={0}\r\n                          onChange={this.onValueChange}\r\n                        />\r\n                        <Form.Check\r\n                          type=\"radio\"\r\n                          label={this.state.questions[this.state.cur_q].alternatives[1]}\r\n                          name=\"Radios\"\r\n                          id=\"Radios2\"\r\n                          value={1}\r\n                          onChange={this.onValueChange}\r\n                        />\r\n                        <Form.Check\r\n                          type=\"radio\"\r\n                          label={this.state.questions[this.state.cur_q].alternatives[2]}\r\n                          name=\"Radios\"\r\n                          id=\"Radios3\"\r\n                          value={2}\r\n                          onChange={this.onValueChange}\r\n                        />\r\n                      </Col>\r\n                    </Form.Group>\r\n                  </fieldset>\r\n\r\n                  {this.state.cur_selected && (\r\n                    <Form.Group as={Row}>\r\n                      <Col sm={{ span: 10, offset: 2 }}>\r\n                        <Button type=\"submit\">Nästa</Button>\r\n                      </Col>\r\n                    </Form.Group>\r\n                  )}\r\n                </Form>\r\n              </h4>\r\n            </Col>\r\n          )}\r\n        </Row>\r\n      </Col>\r\n    );\r\n  }\r\n\r\n  mySubmitHandler = (event) => {\r\n    console.log(this.state.cur_q);\r\n    event.preventDefault();\r\n    answers.push(this.state.cur_selected);\r\n    let current = this.state.cur_q;\r\n    this.setState({ cur_q: current + 1 });\r\n    marker.setLatLng(this.state.questions[current + 1].coords[this.state.cur_selected]);\r\n    this.setState({\r\n      cur_selected: null,\r\n    });\r\n  };\r\n\r\n  onValueChange = (event) => {\r\n    this.setState({\r\n      cur_selected: event.target.value,\r\n    });\r\n  };\r\n\r\n  update = (e) => {\r\n    let distance = getDistance(\r\n      { latitude: marker._latlng.lat, longitude: marker._latlng.lng },\r\n      { latitude: e.latlng.lat, longitude: e.latlng.lng }\r\n    );\r\n    document.getElementById(\"coords\").innerHTML = distance;\r\n\r\n    this.setState({ close: distance < 3000 });\r\n  };\r\n}\r\n\r\nexport default Map;\r\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport { Container } from \"react-bootstrap\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nimport Map from \"./Map\";\n\nfunction App() {\n  return (\n    <Container fluid={true} className=\"p-0 m-0\">\n      <Map />\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}